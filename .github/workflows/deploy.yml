name: Deploy Summarization Pipeline

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Build Lambda Package in Docker
      run: |
        docker pull python:3.8
        docker run --rm -v "$(pwd)":/app -w /app python:3.8 bash -c "
          apt-get update && apt-get install -y zip

          # Log progress
          echo 'Setting up directories...'
          mkdir -p scripts lambda/build lambda/build/nltk_data

          # Install dependencies
          echo 'Installing dependencies...'
          python3.8 -m pip install --upgrade pip
          python3.8 -m pip install -r lambda/requirements.txt -t lambda/build/

          # Download necessary data for NLTK and TextBlob directly into lambda/build/nltk_data
          echo 'Downloading NLTK and TextBlob data...'
          python3.8 -m nltk.downloader -d lambda/build/nltk_data punkt stopwords wordnet averaged_perceptron_tagger
          python3.8 -m textblob.download_corpora -d lambda/build/nltk_data

          # Verify downloaded resources
          echo 'Contents of lambda/build/nltk_data:'
          ls -R lambda/build/nltk_data/

          # Copy Lambda handler files to the build directory
          echo 'Copying files to build directory...'
          cp lambda/*.py lambda/build/

          # Verify the build directory structure
          echo 'Verifying build directory...'
          ls -R lambda/build/

          # Package the Lambda function
          echo 'Packaging Lambda function...'
          cd lambda/build
          zip -r ../../scripts/textract_lambda.zip ./*
          cd /app
        "

    - name: Deploy SSM Stack
      run: |
        aws cloudformation deploy \
          --template-file templates/ssm.template.yml \
          --stack-name SSMParameterStack \
          --capabilities CAPABILITY_NAMED_IAM

    - name: Upload YAML templates and Lambda package to S3
      run: |
        aws s3 cp scripts/textract_lambda.zip s3://${{ secrets.BUCKET_NAME }}/textract_lambda.zip
        aws s3 cp templates/s3.template.yml s3://${{ secrets.BUCKET_NAME }}/template/
        aws s3 cp templates/ssm.template.yml s3://${{ secrets.BUCKET_NAME }}/template/
        aws s3 cp templates/textract.template.yml s3://${{ secrets.BUCKET_NAME }}/template/
        aws s3 cp templates/master-stack.template.yml s3://${{ secrets.BUCKET_NAME }}/template/

    - name: Deploy Master Stack
      run: |
        aws cloudformation deploy \
          --template-file templates/master-stack.template.yml \
          --stack-name SummarizationMasterStack \
          --capabilities CAPABILITY_NAMED_IAM
