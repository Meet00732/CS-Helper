AWSTemplateFormatVersion: "2010-09-09"
Description: "S3 Buckets Template for Summarization Pipeline"

Parameters:
  BucketName:
    Type: String
    Description: "The name of the pre-existing S3 bucket"

Resources:
  S3RawFilesFolder:
    Type: Custom::S3Folder
    Properties:
      ServiceToken: !GetAtt S3FolderLambda.Arn
      BucketName: !Ref BucketName
      Folder: "summarization-raw-files/"

  S3ProcessedFilesFolder:
    Type: Custom::S3Folder
    Properties:
      ServiceToken: !GetAtt S3FolderLambda.Arn
      BucketName: !Ref BucketName
      Folder: "summarization-to-be-processed-files/"

  S3TemplateFolder:
    Type: Custom::S3Folder
    Properties:
      ServiceToken: !GetAtt S3FolderLambda.Arn
      BucketName: !Ref BucketName
      Folder: "template/"

  S3FolderLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          import cfnresponse

          def handler(event, context):
              s3 = boto3.client('s3')
              bucket = event['ResourceProperties']['BucketName']
              folder = event['ResourceProperties']['Folder']

              try:
                  # Check if the folder exists
                  response = s3.list_objects_v2(Bucket=bucket, Prefix=folder, MaxKeys=1)
                  
                  if 'Contents' not in response or len(response['Contents']) == 0:
                      # Add a placeholder file
                      s3.put_object(Bucket=bucket, Key=f"{folder}folder-placeholder.txt", Body="")

                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {"Message": "Folder created or already exists"})
              except Exception as e:
                  # Handle any errors and fail the stack operation
                  cfnresponse.send(event, context, cfnresponse.FAILED, {"Message": str(e)})


  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource: "arn:aws:s3:::*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
